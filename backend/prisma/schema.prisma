// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles  {
  Admin
  Creator
} 

model Organization {
  id        Int @id @default(autoincrement())
  name      String @unique
  website   String?
  phone     String
  createAt  DateTime  @default(now())
  updateAt  DateTime  @updatedAt
  deleteAt  DateTime? 

}

model User{
  id        Int @id @default(autoincrement())
  email     String    @unique
  firstName String
  lastName  String
  password  String
  position  Position?
  role      Roles
  notes     Note[]
  createAt  DateTime  @default(now())
  updateAt  DateTime   @updatedAt
  deleteAt  DateTime?
}

model Area {
  id        Int @id @default(autoincrement())
  name      String @unique
  code      String?
  createAt  DateTime  @default(now())
  updateAt  DateTime   @updatedAt
  deleteAt  DateTime? 
  employees Employees[]
}

model Position {
  id        Int @id @default(autoincrement())
  name      String @unique
  createAt  DateTime  @default(now())
  updateAt  DateTime   @updatedAt
  deleteAt  DateTime?
  employees Employees[]
  user      User @relation(fields: [userId], references: [id])
  userId    Int @unique
}

model Employees {
  id        Int @id @default(autoincrement())
  email     String @unique
  firstName String
  lastName  String
  position  Position @relation(fields: [positionId], references: [id])
  positionId Int
  area       Area @relation(fields: [areaId], references: [id])
  areaId    Int
  notes     Note[]
  notesEmployees notesEmployees[] 
  createAt  DateTime  @default(now())
  updateAt  DateTime   @updatedAt
  deleteAt  DateTime?
}

model Note {
  id        Int @id @default(autoincrement())
  note      String
  authorId  Int
  author    User @relation(fields: [authorId], references: [id])
  employees Employees[]
  noteEmployees notesEmployees[]
  createAt  DateTime  @default(now())
  updateAt  DateTime   @updatedAt
  deleteAt  DateTime?
}

model notesEmployees {
  note       Note     @relation(fields: [noteId], references: [id])
  noteId     Int
  employee   Employees @relation(fields: [employeeId], references: [id])
  employeeId Int
  @@id([noteId, employeeId])
}

